@using System.Linq
@using DevToolbox.Common
@using Microsoft.Extensions.Logging
@inject ILogger<FeatureInput> logger

<div class="features">
    <table cellspacing="0" cellpadding="0">
        <colgroup>
            <col class="feature" />
            <col class="allowlist" />
            <col class="actions" />
        </colgroup>
        <thead>
            <tr>
                <th>Feature</th>
                <th>Allowlist</th>
            </tr>
        </thead>
        <tbody>
            @for (var entryIndex = 0; entryIndex < entries.Count; entryIndex += 1) {
                var entry = entries[entryIndex];
                var entriesWithoutCurrentEntry = entries.Except(new[] { entry })
                    .Where(e => e.Feature.HasValue)
                    .Select(e => e.Feature)
                    .Cast<Feature>();

                var options = Features.List().Except<Feature>(entriesWithoutCurrentEntry);
                <tr class="feature-entry">
                    <td>
                        <FeatureInput placeholder="Select feature&hellip;" Feature="@entry.Feature" FeatureChanged="@((Feature? feature) => handleFeatureChanged(entry, feature))">
                            <option value="" disabled selected>Select feature&hellip;</option>
                            @foreach (var option in options) {
                                <option value="@option.SpecificationName">@option.DisplayName</option>
                            }
                        </FeatureInput>
                    </td>
                    <td>
                        <FeatureInput placeholder="No URL allowed" value="@string.Join('\n', @entry.AllowList)" autoexpand spellcheck="false" />
                    </td>

                    <td class="action">
                        @if (entry.Feature.HasValue) {
                            <FlatButton @onclick="(() => handleRemoveFeature(entry))" class="delete">
                                <span>Delete</span>
                            </FlatButton>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public EventCallback<List<FeatureEntry>> OnFeatureEntriesChange { get; set; }

    private List<FeatureEntry> entries = new() {
        new FeatureEntry()
    };

    private List<Feature> AvailableFeatures => Features.List().Where(feature =>
            !entries
                .Select(e => e.Feature)
                .Contains(feature)
        ).ToList();

    private async Task handleFeatureChanged(FeatureEntry currentEntry, Feature? feature) {
        currentEntry.Feature = feature;

        if (entries.Last().Feature != null) {
            entries.Add(new FeatureEntry());
        }

        await OnFeatureEntriesChange.InvokeAsync(entries);
    }

    private async Task handleRemoveFeature(FeatureEntry entry) {
        entries.Remove(entry);
        await OnFeatureEntriesChange.InvokeAsync(entries);
    }
}